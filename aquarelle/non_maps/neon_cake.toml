# SPDX-FileCopyrightText: 2024 Eduardo Javier Alvarado Aar√≥n <eduardo.javier.alvarado.aaron@gmail.com>
#
# SPDX-License-Identifier: Apache-2.0

name = 'Neon Cake'
about = 'Pastel colors with complementary color text.'

[options]
name = { name = 'Scheme name', default = 'Neon Cake' }
hue = { name = 'Main hue', about = 'Value in degrees', default = 240.0 }
print = { name = 'Print colors on terminal', default = false }

[options.rotate]
name = 'Main hue rotate'
about = 'Value in degrees to rotate the shade of each surface'
default = 60.0

[options.shading]
name = 'Surface shading'
about = 'This value differentiates the surface luminance'
default = 8.0

[options.surface-luminance]
name = 'Surface luminance'
about = 'Between 0.0 for pure black and 100.0 for pure white'
default = 17.5

[options.surface-chroma]
name = 'Surface chroma'
about = 'Between 0.0 for gray scale colors and 128.0 to 181.0 for saturated colors'
default = 4.0

[options.text-chroma]
name = 'Colorless text chroma'
about = 'Between 0.0 for gray scale colors and 128.0 to 181.0 for saturated colors'
default = 24.0

[options.text-luminance]
name = 'Colorless text luminance'
about = 'Between 0.0 for pure black and 100.0 for pure white'
default = 65.0

[options.overall-chroma]
name = 'Overall chroma'
about = 'Between 0.0 for gray scale colors and 128.0 to 181.0 for saturated colors'
default = 48.0

[options.overall-luminance]
name = 'Overall luminance'
about = 'Between 0.0 for pure black and 100.0 for pure white'
default = 65.0

[script] # rhai
embedded = '''
const hue    = cfg::option("hue");
const name   = cfg::option("name");
const rotate = cfg::option("rotate");

const sc = cfg::option("surface-chroma");
const sl = cfg::option("surface-luminance");
const tc = cfg::option("text-chroma");
const tl = cfg::option("text-luminance");
const oc = cfg::option("overall-chroma");
const ol = cfg::option("overall-luminance");

const N = if tl > sl {
	[ cfg::option("shading"), 4, tl,  10, cfg::option("shading")]
} else {
	[-cfg::option("shading"), 3, ol, -10, 0]
};

let colors = []; colors.pad(8, ());

for i in 0..4 { colors[i] = lch(
	sl + N[0] * (i % N[1]) / 3.0, sc, hue + i * rotate / 4
) }

colors[4] = lch(tl         , tc, hue + 180);
colors[5] = lch(tl   + N[4], tc, hue + 180 + rotate);
colors[6] = lch(N[2]       , tc, hue);
colors[7] = lch(N[2] - N[3], tc, hue);

let like = []; like.pad(6, ());
let area = []; area.pad(6, ());

for (degree, i) in [45, 90, 135, 225, 270, 315] {
	like[i] = lch(ol       , oc, hue + degree);
	area[i] = lch(ol - N[3], oc, hue + degree);
}

fn hue_diff(a, b) {
	to_int(hsv::coords(a).hue - hsv::coords(b).hue);
}

like.sort(hue_diff);
area.sort(hue_diff);

if hsv::coords(like[0]).hue > abs(hsv::coords(like[5]).hue - 360)
	{ like.insert(0, like.pop()) }

if hsv::coords(area[0]).hue > abs(hsv::coords(area[5]).hue - 360)
	{ area.insert(0, area.pop()) }

if cfg::option("print") {
	for tuple in [[colors, "colors"], [like, "like"], [area, "area"]] {
		print("\n[" + tuple[1] + "] (" + cfg::id + ')');
		for (color, i) in tuple[0] {
			print(`${if i < 10 {' '}}${i}: ${color.sgr_fg()} ${color.sgr_bg()}`);
		}
	}
} // toml
`
name    = '${if name.is_empty() { "Neon Cake Dark" } else { name }}'
lower   = { like = ${colors[1]}, area = ${colors[0]}, text = ${colors[4]} }
upper   = { like = ${colors[2]}, area = ${colors[3]}, text = ${colors[5]} }
red     = { like = ${  like[0]}, area = ${  area[0]}, text = ${colors[0]} }
yellow  = { like = ${  like[1]}, area = ${  area[1]}, text = ${colors[0]} }
green   = { like = ${  like[2]}, area = ${  area[2]}, text = ${colors[0]} }
cyan    = { like = ${  like[3]}, area = ${  area[3]}, text = ${colors[0]} }
blue    = { like = ${  like[4]}, area = ${  area[4]}, text = ${colors[0]} }
magenta = { like = ${  like[5]}, area = ${  area[5]}, text = ${colors[0]} }
any     = { like = ${colors[6]}, area = ${colors[7]}, text = ${colors[0]} }
`
'''
